const TelegramApi = require('node-telegram-bot-api');
const config = require('./src/config.js');
const btns = require('./src/keyboard-buttons.js');
const coopParseAnswers = require('./src/coop/parse-answers.js');
const respParseAnswers = require('./src/resp/parse-answers.js');
const getChatId = require('./src/getChatId.js');
const keyboard = require('./src/keyboard.js');
const respQuestions = require('./src/resp/questions.js');
const coopQuestions = require('./src/coop/questions.js');
const urlValidate = require('./src/url-validate.js');
const _ = require('lodash');

const bot = new TelegramApi(config.TOKEN, { polling: true });

bot.setMyCommands([
  { command: '/start', description: '–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞' },
  { command: '/home', description: '–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é' },
]);
const db = {};

bot.on('message', (msg) => {
  if (msg.text === '/start' || msg.text === '/home') {
    delete db[getChatId];
    return;
  }

  if (Object.hasOwn(db, getChatId(msg)) && !Object.values(btns.resp).includes(msg.text)) {
    const replyText = msg?.reply_to_message?.text;

    if (respQuestions.includes(replyText) && db[getChatId(msg)].type === 'resp') {
      const question = replyText;
      db[getChatId(msg)][question] = msg.text;
      const index = respQuestions.indexOf(question);

      if (respQuestions.indexOf(question) === respQuestions.length - 1) {
        let text = `–í–∞—à–∏ –æ—Ç–≤–µ—Ç—ã: \n\n${respParseAnswers(
          db[getChatId(msg)],
        )}\n\n–ï—Å–ª–∏ –≤—Å–µ –≤–µ—Ä–Ω–æ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "${btns.resp.confirm}"`;

        bot.sendMessage(getChatId(msg), text, {
          reply_markup: {
            keyboard: keyboard.resp,
            resize_keyboard: true,
          },
        });
        return;
      }

      let nextQuestion = respQuestions[index + 1];
      bot.sendMessage(getChatId(msg), nextQuestion, {
        reply_markup: {
          force_reply: true,
        },
      });
    } else if (coopQuestions.includes(replyText) && db[getChatId(msg)].type === 'coop') {
      const question = replyText;
      if (coopQuestions.indexOf(question) === 2) {
        if (urlValidate(msg.text)) {
          db[getChatId(msg)][question] = msg.text;

          const user = msg.from;
          bot
            .sendMessage(
              config.agent,
              `–ù–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.first_name}${
                user.last_name ? ` ${user.last_name}` : ''
              }${user.username ? ` (@${user.username})` : ''}: \n\n${coopParseAnswers(
                db[getChatId(msg)],
              )}`,
            )
            .then(() => {
              bot.sendMessage(
                getChatId(msg),
                '–í–∞—à–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –±—ã–ª–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ. C–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ–º—Å—è. –ê –ø–æ–∫–∞ –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –¥–µ–π—Å—Ç–≤–∏–µ',
                {
                  reply_markup: {
                    keyboard: keyboard.home,
                    resize_keyboard: true,
                  },
                },
              );

              delete db[getChatId(msg)];
            });
        } else {
          bot
            .sendMessage(
              getChatId(msg),
              `C—Å—ã–ª–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –Ω–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–π. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –µ—ë –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫.
(–ü—Ä–∏–º–µ—Ä: http://www.example.com)`,
            )
            .then(() => {
              bot.sendMessage(getChatId(msg), coopQuestions[2], {
                reply_markup: {
                  force_reply: true,
                },
              });
            });
        }
      } else {
        db[getChatId(msg)][question] = msg.text;
        const qIndex = coopQuestions.indexOf(question);
        bot.sendMessage(getChatId(msg), coopQuestions[qIndex + 1], {
          reply_markup: {
            force_reply: true,
          },
        });
      }
    } else if (
      replyText === '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µüòÅ' &&
      db[getChatId(msg)].type === 'other'
    ) {
      const user = msg.from;
      bot
        .sendMessage(
          config.agent,
          `–ù–æ–≤–æ–µ –≤–æ–ø—Ä–æ—Å/–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.first_name}${
            user.last_name ? ` ${user.last_name}` : ''
          }${user.username ? ` (@${user.username})` : ''}: \n\n${msg.text}`,
        )
        .then(() => {
          bot.sendMessage(
            getChatId(msg),
            '–í–∞—à –≤–æ–ø—Ä–æ—Å/–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –±—ã–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã. –°–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ–º—Å—è. –ê –ø–æ–∫–∞ –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –¥–µ–π—Å—Ç–≤–∏–µ',
            {
              reply_markup: {
                keyboard: keyboard.home,
                resize_keyboard: true,
              },
            },
          );
          delete db[getChatId(msg)];
        });
    } else {
      if (msg.text !== btns.resp.noChange) {
        bot
          .sendMessage(
            getChatId(msg),
            '‚ùóÔ∏è –ß—Ç–æ –±—ã –æ—Ç–≤–µ—Ç–∏—Ç—å –≤—ã–¥–µ–ª–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –∏ –Ω–∞–∂–º–∏—Ç–µ "–û—Ç–≤–µ—Ç–∏—Ç—å" ‚ùóÔ∏è',
          )
          .then((data) => setTimeout(() => bot.deleteMessage(data.chat.id, data.message_id), 5000));
      }
    }
  }

  switch (msg.text) {
    case btns.home.resp:
      bot
        .sendMessage(
          getChatId(msg),
          `–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ ${respQuestions.length} –≤–æ–ø—Ä–æ—Å–æ–≤.
–ß—Ç–æ –±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /home.
–ß—Ç–æ –±—ã –æ—Ç–≤–µ—Ç–∏—Ç—å –≤—ã–¥–µ–ª–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –∏ –Ω–∞–∂–º–∏—Ç–µ "–û—Ç–≤–µ—Ç–∏—Ç—å"`,
        )
        .then(() => {
          db[getChatId(msg)] = { type: 'resp' };
          bot.sendMessage(getChatId(msg), `${respQuestions[0]}`, {
            reply_markup: {
              force_reply: true,
            },
          });
        });
      break;
    case btns.home.coop:
      bot
        .sendMessage(
          getChatId(msg),
          `–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ ${coopQuestions.length} –≤–æ–ø—Ä–æ—Å–∞.
  –ß—Ç–æ –±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /home.
  –ß—Ç–æ –±—ã –æ—Ç–≤–µ—Ç–∏—Ç—å –≤—ã–¥–µ–ª–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –∏ –Ω–∞–∂–º–∏—Ç–µ "–û—Ç–≤–µ—Ç–∏—Ç—å"`,
        )
        .then(() => {
          db[getChatId(msg)] = { type: 'coop' };
          bot.sendMessage(getChatId(msg), `${coopQuestions[0]}`, {
            reply_markup: {
              force_reply: true,
            },
          });
        });
      break;
    case btns.home.other:
      bot
        .sendMessage(getChatId(msg), '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µüòÅ', {
          reply_markup: {
            force_reply: true,
          },
        })
        .then(() => {
          db[getChatId(msg)] = { type: 'other' };
        });
      break;
    case btns.resp.confirm:
      bot.sendMessage(
        getChatId(msg),
        '–í–∞—à–∏ –æ—Ç–≤–µ—Ç—ã –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã. C–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ–º—Å—è. –ê –ø–æ–∫–∞ –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –¥–µ–π—Å—Ç–≤–∏–µ',
        {
          reply_markup: {
            keyboard: keyboard.home,
            resize_keyboard: true,
          },
        },
      );

      const user = msg.from;
      bot
        .sendMessage(
          config.agent,
          `–ù–æ–≤–∞—è –∞–Ω–∫–µ—Ç–∞. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.first_name}${
            user.last_name ? ` ${user.last_name}` : ''
          }${user.username ? ` (@${user.username})` : ''}: \n\n${respParseAnswers(
            db[getChatId(msg)],
          )}`,
        )
        .then(() => {
          delete db[getChatId(msg)];
        });
      break;
    case btns.resp.cancel:
      bot.sendMessage(
        getChatId(msg),
        '–í–∞—à–∏ –æ—Ç–≤–µ—Ç—ã –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã. –¢–µ–ø–µ—Ä—å –≤—ã –Ω–∞ –≥–ª–∞–≤–Ω–æ–π, –≤—ã–±–∏—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –¥–µ–π—Å—Ç–≤–∏–µ',
        {
          reply_markup: {
            keyboard: keyboard.home,
            resize_keyboard: true,
          },
        },
      );
      delete db[getChatId(msg)];
      break;
  }
});

bot.onText(/\/start/, (msg) => {
  const text = `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, ${msg.from.first_name} ;)
–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ –Ω–∞—à –±–æ—Ç –ø–æ–ª–æ–≤–æ–π –ø—Å–∏—Ö–æ–ª–æ–≥–∏–∏!
–í—ã–±–∏—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –¥–µ–π—Å—Ç–≤–∏–µ`;
  bot.sendMessage(getChatId(msg), text, {
    reply_markup: {
      keyboard: keyboard.home,
      resize_keyboard: true,
    },
  });
});

bot.onText(/\/home/, (msg) => {
  bot.sendMessage(getChatId(msg), 'üè† –í—ã –Ω–∞ –≥–ª–∞–≤–Ω–æ–π, –≤—ã–±–∏—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –¥–µ–π—Å—Ç–≤–∏–µ', {
    reply_markup: {
      keyboard: keyboard.home,
      resize_keyboard: true,
    },
  });
});
